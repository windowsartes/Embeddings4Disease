[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"


[project]
name = "embeddings4disease"
version = "0.2.3"

authors = [
  {name = "Lipkovich Mikhail"},
  {name = "Makarov Nikolai", email = "nikolai.makarov.sc@gmail.com"},
]

description = "TBA"

readme = "README.md"

license = {file = "LICENSE"}

keywords = ["TBA"]


dependencies = [
  "accelerate >= 0.21.0",
  "click",
  "matplotlib",
  "seaborn",
  "pytorch-warmup >= 0.1.1",
  "PyYAML >= 6.0.1",
  "torch",
  "transformers >= 4.38.2",
  "tqdm",
]

[project.optional-dependencies]
roformer = [
  "rjieba"
]

wandb = [
  "wandb"
]

development = [
  "black",
  "mypy",
  "ruff",
  "types-tqdm",
  "types-PyYAML",
  "types-seaborn",
  "notebook",
]

[project.scripts]
preprocess_mlm = "embeddings4disease.cli.preprocess_mlm:preprocess"
preprocess_nsp = "embeddings4disease.cli.preprocess_nsp:preprocess"
preprocess_seq2seq = "embeddings4disease.cli.preprocess_seq2seq:preprocess"
train_backbone = "embeddings4disease.cli.train_backbone:train"
train_miltilabel_head = "embeddings4disease.cli.train_multilabel_head:train"
train_encoderdecoder_head = "embeddings4disease.cli.train_encoderdecoder_head:train"
validate_backbone = "embeddings4disease.cli.validate_backbone:validate"
validate_baseline = "embeddings4disease.cli.validate_baseline:validate"
validate_multilabel_head = "embeddings4disease.cli.validate_multilabel_head:validate"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".ipynb_checkpoints",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "./*/__init__.py",
    "./*/*/__init__.py",
    "./*/*/*/__init__.py",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "W"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = []
unfixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "tab"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.mypy_cache
    | \.venv
    | build
  )/
)
'''

[tool.mypy]
python_version = "3.11"
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
allow_untyped_globals = false
allow_redefinition = false
exclude = "./tests/"
plugins = [
  "numpy.typing.mypy_plugin",
]


[[tool.mypy.overrides]]
module = [
    "transformers",
    "transformers.models.bert.modeling_bert",
    "pytorch_warmup",
]
ignore_missing_imports = true